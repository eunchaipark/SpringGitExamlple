name: Deploy MyApp Spring Boot Application

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: windows-latest
    
    steps:
    - name: 프로젝트 체크아웃
      uses: actions/checkout@v4
      
    - name: JDK 설정 및 Maven 빌드
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Maven 캐시 설정
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Maven 빌드 실행
      shell: pwsh
      run: |
        Write-Host "Maven 빌드를 시작합니다..." -ForegroundColor Green
        mvn clean package -DskipTests
        Write-Host "Maven 빌드가 완료되었습니다." -ForegroundColor Green
        
    - name: 기존 도커 컨테이너 중지 및 삭제
      shell: pwsh
      run: |
        Write-Host "기존 컨테이너를 중지하고 삭제합니다..." -ForegroundColor Yellow
        try {
          docker stop ${{ secrets.CONTAINER_NAME }}
          Write-Host "컨테이너 '${{ secrets.CONTAINER_NAME }}'가 중지되었습니다." -ForegroundColor Green
        } catch {
          Write-Host "중지할 컨테이너가 없습니다." -ForegroundColor Gray
        }
        
        try {
          docker rm ${{ secrets.CONTAINER_NAME }}
          Write-Host "컨테이너 '${{ secrets.CONTAINER_NAME }}'가 삭제되었습니다." -ForegroundColor Green
        } catch {
          Write-Host "삭제할 컨테이너가 없습니다." -ForegroundColor Gray
        }
        
    - name: 기존 도커 이미지 삭제
      shell: pwsh
      run: |
        Write-Host "기존 도커 이미지를 삭제합니다..." -ForegroundColor Yellow
        try {
          docker rmi ${{ secrets.IMAGE_NAME }}
          Write-Host "이미지 '${{ secrets.IMAGE_NAME }}'가 삭제되었습니다." -ForegroundColor Green
        } catch {
          Write-Host "삭제할 이미지가 없습니다." -ForegroundColor Gray
        }
        
    - name: 도커 이미지 빌드
      shell: pwsh
      run: |
        Write-Host "새 도커 이미지를 빌드합니다..." -ForegroundColor Green
        docker build -t ${{ secrets.IMAGE_NAME }} .
        Write-Host "도커 이미지 '${{ secrets.IMAGE_NAME }}'가 성공적으로 빌드되었습니다." -ForegroundColor Green
        
    - name: 새 도커 컨테이너 실행
      shell: pwsh
      run: |
        Write-Host "새 도커 컨테이너를 실행합니다..." -ForegroundColor Green
        docker run -d `
          --name ${{ secrets.CONTAINER_NAME }} `
          -p 9090:9090 `
          --restart unless-stopped `
          ${{ secrets.IMAGE_NAME }}
        Write-Host "컨테이너 '${{ secrets.CONTAINER_NAME }}'가 성공적으로 실행되었습니다." -ForegroundColor Green
        
    - name: 상태 확인
      shell: pwsh
      run: |
        Write-Host "배포 상태를 확인합니다..." -ForegroundColor Cyan
        Start-Sleep -Seconds 30
        
        Write-Host "실행 중인 컨테이너 목록:" -ForegroundColor Cyan
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        
        Write-Host "컨테이너 로그 확인:" -ForegroundColor Cyan
        docker logs ${{ secrets.CONTAINER_NAME }} --tail 20
        
        Write-Host "애플리케이션이 http://localhost:9090 에서 실행 중입니다." -ForegroundColor Green
        Write-Host "배포가 완료되었습니다!" -ForegroundColor Green
