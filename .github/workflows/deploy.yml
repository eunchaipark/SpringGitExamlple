name: CI/CD Workflow for SpringGitExample

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    env:
      DOCKER_HOST: tcp://${{ secrets.DOCKER-HOST }}:${{ secrets.DOCKER_PORT }}

    steps:
      # 1. 프로젝트 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2-1. Docker 연결 테스트
      - name: Test Docker connection
        shell: powershell
        run: |
          Write-Host "Testing Docker connection..."
          Write-Host "DOCKER_HOST: $env:DOCKER_HOST"
          try {
            docker version
            docker info
            Write-Host "Docker connection successful!"
          } catch {
            Write-Host "Docker connection failed: $_"
            Write-Host "Please check if Docker daemon is running"
            exit 1
          }

      # 2-2. JDK 설정 및 Maven 빌드
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build project with Maven
        working-directory: ./myapp
        run: mvn clean package

      # 3. 기존 Docker 컨테이너 중지 및 삭제
      - name: Stop and remove old container
        shell: powershell
        run: |
          $containerName = "${{ secrets.DOCKER_CONTAINER_NAME }}"
          if ([string]::IsNullOrWhiteSpace($containerName)) {
            Write-Host "Warning: DOCKER_CONTAINER_NAME secret is not set or empty"
            exit 0
          }
          $existingContainer = docker ps -a --filter "name=$containerName" --format "{{.Names}}"
          if ($existingContainer -eq $containerName) {
            Write-Host "Stopping and removing container: $containerName"
            docker stop $containerName
            docker rm $containerName
          } else {
            Write-Host "No container named $containerName found."
          }

      # 4. 기존 Docker 이미지 삭제
      - name: Remove old Docker image
        shell: powershell
        run: |
          $imageName = "${{ secrets.DOCKER_IMAGE_NAME }}"
          if ([string]::IsNullOrWhiteSpace($imageName)) {
            Write-Host "Warning: DOCKER_IMAGE_NAME secret is not set or empty"
            exit 0
          }
          try {
            Write-Host "Attempting to remove image: $imageName"
            $imageExists = docker images -q $imageName
            if ($imageExists) {
              docker rmi -f $imageName
              Write-Host "Image $imageName removed successfully."
            } else {
              Write-Host "Image $imageName does not exist."
            }
          } catch {
            Write-Host "Failed to remove image: $imageName"
            Write-Host "Error: $_"
          }

      # 5. Docker 이미지 빌드
      - name: Build Docker image
        working-directory: ./myapp
        shell: powershell
        run: |
          $imageName = "${{ secrets.DOCKER_IMAGE_NAME }}"
          Write-Host "Image name: '$imageName'"
          if ([string]::IsNullOrWhiteSpace($imageName)) {
            Write-Host "Error: DOCKER_IMAGE_NAME secret is not set or empty"
            exit 1
          }
          Write-Host "Building Docker image: $imageName"
          docker build -t $imageName .

      # 6. 새 Docker 컨테이너 실행
      - name: Run new Docker container
        shell: powershell
        run: |
          $imageName = "${{ secrets.DOCKER_IMAGE_NAME }}"
          $containerName = "${{ secrets.DOCKER_CONTAINER_NAME }}"
          Write-Host "Running container '$containerName' from image '$imageName'"
          if ([string]::IsNullOrWhiteSpace($imageName) -or [string]::IsNullOrWhiteSpace($containerName)) {
            Write-Host "Error: DOCKER_IMAGE_NAME or DOCKER_CONTAINER_NAME secret is not set"
            exit 1
          }
          docker run -d --name $containerName -p 9090:9090 $imageName

      # 7. 컨테이너 상태 확인
      - name: Check running containers
        run: docker ps
